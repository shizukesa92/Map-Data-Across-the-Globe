// Map data
const main = (error, countries, meteor) => {
	if (error) throw error;

	// Set SVG dimensions and append map 

	let w = document.getElementById("main").clientWidth,
		h = document.getElementById("main").clientHeight;

	let zoom = d3.zoom() //https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2
		.scaleExtent([.5, 18])
		.on("zoom", zoomed);

	var projection = d3.geoMercator() //https://github.com/d3/d3-geo
		.translate([w / 2, h / 2])
		.scale(300),
		path = d3.geoPath(projection);

	let map = d3.select("svg")
		.attr("width", w)
		.attr("height", h)
		.call(zoom);

	// Tooltip
	let tooltips = d3.select("#main")
		.append("div")
		.attr("class", "tooltip")
		.style("opacity", 0)

	// Render countries
	map.selectAll("path")
		.data(topojson.feature(countries, countries.objects.countries).features) //https://github.com/topojson/topojson to convert topojson to GeoJSON
		.enter()
		.append("path")
		.attr("fill", "#95E1D3")
		.attr("stroke", "#266D98")
		.attr("d", path)

	// Meteorite Data
	meteor.features.sort((a, b) => { //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Sorts meteorites by date 
		return new Date(a.properties.year) - new Date(b.properties.year); //https://stackoverflow.com/questions/10123953/sort-javascript-object-array-by-date
	})

	// Assigns colours to meteorites according to impact date
	let hue = 0,
		colours = [];
	meteor.features.map(e => {
		hue += .35;
		colours[e.properties.year] = hue;
		e.color = `hsl(${hue},100%, 50%)`;
	})

	// Sorts meteorites by mass
	meteor.features.sort((a, b) =>
		b.properties.mass - a.properties.mass
	)

	let meteorites = map.append("g") // g required for bigger circles to render
		.selectAll("path")
		.data(meteor.features)
		.enter()
		.append("circle")
		.attr("cx", d =>
			projection([d.properties.reclong, d.properties.reclat])[0]
		)
		.attr("cy", d =>
			projection([d.properties.reclong, d.properties.reclat])[1]
		)
		.attr("r", d => {
			var range = 718750 / 2 / 2;

			if (d.properties.mass <= range) return 2;
			else if (d.properties.mass <= range * 2) return 10;
			else if (d.properties.mass <= range * 3) return 20;
			else if (d.properties.mass <= range * 20) return 30;
			else if (d.properties.mass <= range * 100) return 40;
			return 50;
		})
		.attr("fill-opacity", d => {
			return d.properties.mass <= 718750 / 2 / 2 ? 1 : 0.5;
		})
		.attr("stroke-width", 1)
		.attr("stroke", "#EAFFD0")
		.attr("fill", d =>
			d.color
		)
		.on("mouseover", d => {
			d3.select(this).attr("d", path).style("fill", "black");
			tooltips.transition()
				.duration(200)
				.style("opacity", .9);
			tooltips.html('<span >fall:</span> ' + d.properties.fall + '<br>' +
					'<span >mass:</span> ' + d.properties.mass + '<br>' +
					'<span >name:</span> ' + d.properties.name + '<br>' +
					'<span >nametype:</span> ' + d.properties.nametype + '<br>' +
					'<span >recclass:</span> ' + d.properties.recclass + '<br>' +
					'<span >reclat:</span> ' + d.properties.reclat + '<br>' +
					'<span >year:</span> ' + d.properties.year + '<br>')
				.style("left", (d3.event.pageX) + "px")
				.style("top", (d3.event.pageY) + "px")
		})
		.on("mouseout", d => {
			d3.select(this).attr("d", path).style("fill", d =>
				d.properties.hsl
			);

			tooltips.transition()
				.duration(500)
				.style("opacity", 0);
		});

	function zoomed() { // Do not use arrow syntax or it will go out of scope
		map.attr("transform", d3.event.transform); // No need transform meteorites because they are part of map
	}

	function sizeChange() {
		d3.select("path").attr("transform", "scale(" + document.getElementById("main").clientWidth + ")");
		$("svg").height(document.getElementById("main").clientHeight);
	}
	sizeChange();

};


d3.queue().defer(d3.json, "https://d3js.org/world-50m.v1.json").defer(d3.json, "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json").await(main); // http://bl.ocks.org/mapsam/6090056 Required or circles will render obscured by map
